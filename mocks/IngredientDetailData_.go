// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	ingredient_details "alta-cookit-be/features/ingredient_details"

	mock "github.com/stretchr/testify/mock"
)

// IngredientDetailData_ is an autogenerated mock type for the IngredientDetailData_ type
type IngredientDetailData_ struct {
	mock.Mock
}

// ActionValidator provides a mock function with given fields: id, recipeId, userId
func (_m *IngredientDetailData_) ActionValidator(id uint, recipeId uint, userId uint) bool {
	ret := _m.Called(id, recipeId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, uint, uint) bool); ok {
		r0 = rf(id, recipeId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteIngredientDetailById provides a mock function with given fields: ingredientDetailEntity
func (_m *IngredientDetailData_) DeleteIngredientDetailById(ingredientDetailEntity *ingredient_details.IngredientDetailEntity) error {
	ret := _m.Called(ingredientDetailEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ingredient_details.IngredientDetailEntity) error); ok {
		r0 = rf(ingredientDetailEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertIngredientDetail provides a mock function with given fields: ingredientDetailEntity
func (_m *IngredientDetailData_) InsertIngredientDetail(ingredientDetailEntity *ingredient_details.IngredientDetailEntity) (*ingredient_details.IngredientDetailEntity, error) {
	ret := _m.Called(ingredientDetailEntity)

	var r0 *ingredient_details.IngredientDetailEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*ingredient_details.IngredientDetailEntity) (*ingredient_details.IngredientDetailEntity, error)); ok {
		return rf(ingredientDetailEntity)
	}
	if rf, ok := ret.Get(0).(func(*ingredient_details.IngredientDetailEntity) *ingredient_details.IngredientDetailEntity); ok {
		r0 = rf(ingredientDetailEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ingredient_details.IngredientDetailEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*ingredient_details.IngredientDetailEntity) error); ok {
		r1 = rf(ingredientDetailEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIngredientDetailById provides a mock function with given fields: ingredientDetailEntity
func (_m *IngredientDetailData_) UpdateIngredientDetailById(ingredientDetailEntity *ingredient_details.IngredientDetailEntity) error {
	ret := _m.Called(ingredientDetailEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ingredient_details.IngredientDetailEntity) error); ok {
		r0 = rf(ingredientDetailEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIngredientDetailData_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewIngredientDetailData_ creates a new instance of IngredientDetailData_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIngredientDetailData_(t mockConstructorTestingTNewIngredientDetailData_) *IngredientDetailData_ {
	mock := &IngredientDetailData_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
