// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	transactions "alta-cookit-be/features/transactions"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService_ is an autogenerated mock type for the TransactionService_ type
type TransactionService_ struct {
	mock.Mock
}

// InsertTransaction provides a mock function with given fields: transactionEntity
func (_m *TransactionService_) InsertTransaction(transactionEntity *transactions.TransactionEntity) (*transactions.TransactionEntity, error) {
	ret := _m.Called(transactionEntity)

	var r0 *transactions.TransactionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*transactions.TransactionEntity) (*transactions.TransactionEntity, error)); ok {
		return rf(transactionEntity)
	}
	if rf, ok := ret.Get(0).(func(*transactions.TransactionEntity) *transactions.TransactionEntity); ok {
		r0 = rf(transactionEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactions.TransactionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*transactions.TransactionEntity) error); ok {
		r1 = rf(transactionEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectTransactionsByUserId provides a mock function with given fields: transactionEntity
func (_m *TransactionService_) SelectTransactionsByUserId(transactionEntity *transactions.TransactionEntity) (*[]transactions.TransactionEntity, error) {
	ret := _m.Called(transactionEntity)

	var r0 *[]transactions.TransactionEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*transactions.TransactionEntity) (*[]transactions.TransactionEntity, error)); ok {
		return rf(transactionEntity)
	}
	if rf, ok := ret.Get(0).(func(*transactions.TransactionEntity) *[]transactions.TransactionEntity); ok {
		r0 = rf(transactionEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]transactions.TransactionEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*transactions.TransactionEntity) error); ok {
		r1 = rf(transactionEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionStatusById provides a mock function with given fields: transactionEntity
func (_m *TransactionService_) UpdateTransactionStatusById(transactionEntity *transactions.TransactionEntity) error {
	ret := _m.Called(transactionEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*transactions.TransactionEntity) error); ok {
		r0 = rf(transactionEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransactionStatusByMidtrans provides a mock function with given fields: transactionEntity
func (_m *TransactionService_) UpdateTransactionStatusByMidtrans(transactionEntity *transactions.TransactionEntity) error {
	ret := _m.Called(transactionEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*transactions.TransactionEntity) error); ok {
		r0 = rf(transactionEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewTransactionService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionService_ creates a new instance of TransactionService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionService_(t mockConstructorTestingTNewTransactionService_) *TransactionService_ {
	mock := &TransactionService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
