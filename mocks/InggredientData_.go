// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	ingredients "alta-cookit-be/features/ingredients"

	mock "github.com/stretchr/testify/mock"
)

// IngredientData_ is an autogenerated mock type for the IngredientData_ type
type IngredientData_ struct {
	mock.Mock
}

// ActionValidator provides a mock function with given fields: id, recipeId, userId
func (_m *IngredientData_) ActionValidator(id uint, recipeId uint, userId uint) bool {
	ret := _m.Called(id, recipeId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, uint, uint) bool); ok {
		r0 = rf(id, recipeId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteIngredientById provides a mock function with given fields: ingredientEntity
func (_m *IngredientData_) DeleteIngredientById(ingredientEntity *ingredients.IngredientEntity) error {
	ret := _m.Called(ingredientEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ingredients.IngredientEntity) error); ok {
		r0 = rf(ingredientEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertIngredient provides a mock function with given fields: ingredientEntity
func (_m *IngredientData_) InsertIngredient(ingredientEntity *ingredients.IngredientEntity) (*ingredients.IngredientEntity, error) {
	ret := _m.Called(ingredientEntity)

	var r0 *ingredients.IngredientEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*ingredients.IngredientEntity) (*ingredients.IngredientEntity, error)); ok {
		return rf(ingredientEntity)
	}
	if rf, ok := ret.Get(0).(func(*ingredients.IngredientEntity) *ingredients.IngredientEntity); ok {
		r0 = rf(ingredientEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ingredients.IngredientEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*ingredients.IngredientEntity) error); ok {
		r1 = rf(ingredientEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIngredientById provides a mock function with given fields: ingredientEntity
func (_m *IngredientData_) UpdateIngredientById(ingredientEntity *ingredients.IngredientEntity) error {
	ret := _m.Called(ingredientEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*ingredients.IngredientEntity) error); ok {
		r0 = rf(ingredientEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIngredientData_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewIngredientData_ creates a new instance of IngredientData_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIngredientData_(t mockConstructorTestingTNewIngredientData_) *IngredientData_ {
	mock := &IngredientData_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
