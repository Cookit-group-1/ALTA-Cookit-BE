// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	images "alta-cookit-be/features/images"

	mock "github.com/stretchr/testify/mock"

	models "alta-cookit-be/features/images/models"
)

// ImageData_ is an autogenerated mock type for the ImageData_ type
type ImageData_ struct {
	mock.Mock
}

// ActionValidator provides a mock function with given fields: id, recipeId, userId
func (_m *ImageData_) ActionValidator(id uint, recipeId uint, userId uint) bool {
	ret := _m.Called(id, recipeId, userId)

	var r0 bool
	if rf, ok := ret.Get(0).(func(uint, uint, uint) bool); ok {
		r0 = rf(id, recipeId, userId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DeleteImageById provides a mock function with given fields: imageEntity
func (_m *ImageData_) DeleteImageById(imageEntity *images.ImageEntity) error {
	ret := _m.Called(imageEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*images.ImageEntity) error); ok {
		r0 = rf(imageEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertImage provides a mock function with given fields: imageEntity
func (_m *ImageData_) InsertImage(imageEntity *[]images.ImageEntity) (*[]images.ImageEntity, error) {
	ret := _m.Called(imageEntity)

	var r0 *[]images.ImageEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*[]images.ImageEntity) (*[]images.ImageEntity, error)); ok {
		return rf(imageEntity)
	}
	if rf, ok := ret.Get(0).(func(*[]images.ImageEntity) *[]images.ImageEntity); ok {
		r0 = rf(imageEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]images.ImageEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*[]images.ImageEntity) error); ok {
		r1 = rf(imageEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectImagesByRecipeId provides a mock function with given fields: recipeId
func (_m *ImageData_) SelectImagesByRecipeId(recipeId uint) *[]models.Image {
	ret := _m.Called(recipeId)

	var r0 *[]models.Image
	if rf, ok := ret.Get(0).(func(uint) *[]models.Image); ok {
		r0 = rf(recipeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Image)
		}
	}

	return r0
}

// UpdateImageById provides a mock function with given fields: imageEntity
func (_m *ImageData_) UpdateImageById(imageEntity *images.ImageEntity) (*images.ImageEntity, error) {
	ret := _m.Called(imageEntity)

	var r0 *images.ImageEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*images.ImageEntity) (*images.ImageEntity, error)); ok {
		return rf(imageEntity)
	}
	if rf, ok := ret.Get(0).(func(*images.ImageEntity) *images.ImageEntity); ok {
		r0 = rf(imageEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*images.ImageEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*images.ImageEntity) error); ok {
		r1 = rf(imageEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewImageData_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewImageData_ creates a new instance of ImageData_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewImageData_(t mockConstructorTestingTNewImageData_) *ImageData_ {
	mock := &ImageData_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
