// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// CartDelivery_ is an autogenerated mock type for the CartDelivery_ type
type CartDelivery_ struct {
	mock.Mock
}

// DeleteCartById provides a mock function with given fields: e
func (_m *CartDelivery_) DeleteCartById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCart provides a mock function with given fields: e
func (_m *CartDelivery_) InsertCart(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectCartsByUserId provides a mock function with given fields: e
func (_m *CartDelivery_) SelectCartsByUserId(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCartById provides a mock function with given fields: e
func (_m *CartDelivery_) UpdateCartById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCartDelivery_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartDelivery_ creates a new instance of CartDelivery_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartDelivery_(t mockConstructorTestingTNewCartDelivery_) *CartDelivery_ {
	mock := &CartDelivery_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
