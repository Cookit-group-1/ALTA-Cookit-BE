// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	steps "alta-cookit-be/features/steps"

	mock "github.com/stretchr/testify/mock"
)

// StepService_ is an autogenerated mock type for the StepService_ type
type StepService_ struct {
	mock.Mock
}

// DeleteStepById provides a mock function with given fields: stepEntity
func (_m *StepService_) DeleteStepById(stepEntity *steps.StepEntity) error {
	ret := _m.Called(stepEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*steps.StepEntity) error); ok {
		r0 = rf(stepEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteStepByRecipeId provides a mock function with given fields: stepEntity
func (_m *StepService_) DeleteStepByRecipeId(stepEntity *steps.StepEntity) error {
	ret := _m.Called(stepEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*steps.StepEntity) error); ok {
		r0 = rf(stepEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertStep provides a mock function with given fields: stepEntity
func (_m *StepService_) InsertStep(stepEntity *steps.StepEntity) (*steps.StepEntity, error) {
	ret := _m.Called(stepEntity)

	var r0 *steps.StepEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*steps.StepEntity) (*steps.StepEntity, error)); ok {
		return rf(stepEntity)
	}
	if rf, ok := ret.Get(0).(func(*steps.StepEntity) *steps.StepEntity); ok {
		r0 = rf(stepEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*steps.StepEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*steps.StepEntity) error); ok {
		r1 = rf(stepEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStepById provides a mock function with given fields: stepEntity
func (_m *StepService_) UpdateStepById(stepEntity *steps.StepEntity) error {
	ret := _m.Called(stepEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*steps.StepEntity) error); ok {
		r0 = rf(stepEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStepService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewStepService_ creates a new instance of StepService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStepService_(t mockConstructorTestingTNewStepService_) *StepService_ {
	mock := &StepService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
