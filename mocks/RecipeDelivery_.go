// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// RecipeDelivery_ is an autogenerated mock type for the RecipeDelivery_ type
type RecipeDelivery_ struct {
	mock.Mock
}

// DeleteRecipeById provides a mock function with given fields: e
func (_m *RecipeDelivery_) DeleteRecipeById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertRecipe provides a mock function with given fields: e
func (_m *RecipeDelivery_) InsertRecipe(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectRecipeDetailById provides a mock function with given fields: e
func (_m *RecipeDelivery_) SelectRecipeDetailById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectRecipes provides a mock function with given fields: e
func (_m *RecipeDelivery_) SelectRecipes(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectRecipesTimeline provides a mock function with given fields: e
func (_m *RecipeDelivery_) SelectRecipesTimeline(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectRecipesTrending provides a mock function with given fields: e
func (_m *RecipeDelivery_) SelectRecipesTrending(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRecipeById provides a mock function with given fields: e
func (_m *RecipeDelivery_) UpdateRecipeById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRecipeDelivery_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewRecipeDelivery_ creates a new instance of RecipeDelivery_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRecipeDelivery_(t mockConstructorTestingTNewRecipeDelivery_) *RecipeDelivery_ {
	mock := &RecipeDelivery_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
