// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	users "alta-cookit-be/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserData is an autogenerated mock type for the UserData type
type UserData struct {
	mock.Mock
}

// Deactive provides a mock function with given fields: userID
func (_m *UserData) Deactive(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListUserRequest provides a mock function with given fields: userID
func (_m *UserData) ListUserRequest(userID uint) ([]users.Core, error) {
	ret := _m.Called(userID)

	var r0 []users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]users.Core, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []users.Core); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: username, password
func (_m *UserData) Login(username string, password string) (users.Core, error) {
	ret := _m.Called(username, password)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (users.Core, error)); ok {
		return rf(username, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) users.Core); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Profile provides a mock function with given fields: userID
func (_m *UserData) Profile(userID uint) (users.Core, error) {
	ret := _m.Called(userID)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (users.Core, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) users.Core); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newUser
func (_m *UserData) Register(newUser users.Core) (users.Core, error) {
	ret := _m.Called(newUser)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(users.Core) (users.Core, error)); ok {
		return rf(newUser)
	}
	if rf, ok := ret.Get(0).(func(users.Core) users.Core); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(users.Core) error); ok {
		r1 = rf(newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUser provides a mock function with given fields: userID, quote
func (_m *UserData) SearchUser(userID uint, quote string) ([]users.Core, error) {
	ret := _m.Called(userID, quote)

	var r0 []users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, string) ([]users.Core, error)); ok {
		return rf(userID, quote)
	}
	if rf, ok := ret.Get(0).(func(uint, string) []users.Core); ok {
		r0 = rf(userID, quote)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]users.Core)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, string) error); ok {
		r1 = rf(userID, quote)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectUserById provides a mock function with given fields: existUser
func (_m *UserData) SelectUserById(existUser users.Core) *users.Core {
	ret := _m.Called(existUser)

	var r0 *users.Core
	if rf, ok := ret.Get(0).(func(users.Core) *users.Core); ok {
		r0 = rf(existUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.Core)
		}
	}

	return r0
}

// Update provides a mock function with given fields: userID, updateData
func (_m *UserData) Update(userID uint, updateData users.Core) (users.Core, error) {
	ret := _m.Called(userID, updateData)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, users.Core) (users.Core, error)); ok {
		return rf(userID, updateData)
	}
	if rf, ok := ret.Get(0).(func(uint, users.Core) users.Core); ok {
		r0 = rf(userID, updateData)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(uint, users.Core) error); ok {
		r1 = rf(userID, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeUser provides a mock function with given fields: userID, approvement
func (_m *UserData) UpgradeUser(userID uint, approvement users.Core) (users.Core, error) {
	ret := _m.Called(userID, approvement)

	var r0 users.Core
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, users.Core) (users.Core, error)); ok {
		return rf(userID, approvement)
	}
	if rf, ok := ret.Get(0).(func(uint, users.Core) users.Core); ok {
		r0 = rf(userID, approvement)
	} else {
		r0 = ret.Get(0).(users.Core)
	}

	if rf, ok := ret.Get(1).(func(uint, users.Core) error); ok {
		r1 = rf(userID, approvement)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
