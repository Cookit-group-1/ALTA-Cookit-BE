// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	carts "alta-cookit-be/features/carts"

	mock "github.com/stretchr/testify/mock"
)

// CartService_ is an autogenerated mock type for the CartService_ type
type CartService_ struct {
	mock.Mock
}

// DeleteCartById provides a mock function with given fields: cartEntity
func (_m *CartService_) DeleteCartById(cartEntity *carts.CartEntity) error {
	ret := _m.Called(cartEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*carts.CartEntity) error); ok {
		r0 = rf(cartEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertCart provides a mock function with given fields: cartEntity
func (_m *CartService_) InsertCart(cartEntity *carts.CartEntity) (*carts.CartEntity, error) {
	ret := _m.Called(cartEntity)

	var r0 *carts.CartEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*carts.CartEntity) (*carts.CartEntity, error)); ok {
		return rf(cartEntity)
	}
	if rf, ok := ret.Get(0).(func(*carts.CartEntity) *carts.CartEntity); ok {
		r0 = rf(cartEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*carts.CartEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*carts.CartEntity) error); ok {
		r1 = rf(cartEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectCartsByUserId provides a mock function with given fields: cartEntity
func (_m *CartService_) SelectCartsByUserId(cartEntity *carts.CartEntity) (*[]carts.CartEntity, error) {
	ret := _m.Called(cartEntity)

	var r0 *[]carts.CartEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(*carts.CartEntity) (*[]carts.CartEntity, error)); ok {
		return rf(cartEntity)
	}
	if rf, ok := ret.Get(0).(func(*carts.CartEntity) *[]carts.CartEntity); ok {
		r0 = rf(cartEntity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]carts.CartEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(*carts.CartEntity) error); ok {
		r1 = rf(cartEntity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCartById provides a mock function with given fields: cartEntity
func (_m *CartService_) UpdateCartById(cartEntity *carts.CartEntity) error {
	ret := _m.Called(cartEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(*carts.CartEntity) error); ok {
		r0 = rf(cartEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewCartService_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartService_ creates a new instance of CartService_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartService_(t mockConstructorTestingTNewCartService_) *CartService_ {
	mock := &CartService_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
