// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"

	mock "github.com/stretchr/testify/mock"
)

// IngredientDelivery_ is an autogenerated mock type for the IngredientDelivery_ type
type IngredientDelivery_ struct {
	mock.Mock
}

// DeleteIngredientById provides a mock function with given fields: e
func (_m *IngredientDelivery_) DeleteIngredientById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIngredientByRecipeId provides a mock function with given fields: e
func (_m *IngredientDelivery_) DeleteIngredientByRecipeId(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertIngredient provides a mock function with given fields: e
func (_m *IngredientDelivery_) InsertIngredient(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIngredientById provides a mock function with given fields: e
func (_m *IngredientDelivery_) UpdateIngredientById(e echo.Context) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIngredientDelivery_ interface {
	mock.TestingT
	Cleanup(func())
}

// NewIngredientDelivery_ creates a new instance of IngredientDelivery_. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIngredientDelivery_(t mockConstructorTestingTNewIngredientDelivery_) *IngredientDelivery_ {
	mock := &IngredientDelivery_{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
